<?php

/**
 * FLUG Service API
 * PHP version 7.4
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * A service API for the Fyns Linux User Group website
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

declare(strict_types=1);

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\App;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * RegisterRoutes Class Doc Comment
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class RegisterRoutes
{
    /** @var array[] list of all api operations */
    private $operations = [
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/blogs',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractCreateApi',
            'userClassname' => 'CreateApi',
            'operationId' => 'createBlog',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Return the blog on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/createBlog_201_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "uid" : 1,
          "title" : "Blog Post",
          "slug" : "blog-post",
          "shortDesc" : "A brief description of the blog post",
          "image" : {
            "src" : "image.jpg",
            "alt" : "Image for blog post"
          },
          "content" : "This blog will introduce you to the basics...",
          "createdAt" : "2023-11-28T10:00:00Z",
          "updatedAt" : "2023-11-28T11:00:00Z"
        },
        "message" : "{fix me; The message will be different based on the methods, Get, Post and Pacth}"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/events',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractCreateApi',
            'userClassname' => 'CreateApi',
            'operationId' => 'createEvent',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Return the event on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/createEvent_201_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "items" : [ {
            "uid" : 1,
            "title" : "Event 1",
            "shortDesc" : "A brief description of the event 1",
            "createdAt" : "2023-11-28T10:00:00Z",
            "updatedAt" : "2023-11-28T11:00:00Z",
            "startDateTime" : "2023-12-01T09:00:00Z",
            "location" : "Willowbrook Lane 17, Welford-on-Avon, Warwickshire, CV37 8JA, United Kingdom"
          }, {
            "uid" : 2,
            "title" : "Event 2",
            "shortDesc" : "A brief description of the event 2",
            "startDateTime" : "2023-12-08T09:00:00Z",
            "location" : "Convention Center",
            "createdAt" : "2023-11-28T10:00:00Z",
            "updatedAt" : "2023-11-28T11:00:00Z"
          } ],
          "pagination" : {
            "first" : 1,
            "prev" : 1,
            "current" : 1,
            "next" : 1,
            "last" : 1
          },
          "results" : 2,
          "totalResults" : 2,
          "page" : 1,
          "totalPages" : 1
        },
        "message" : "{fix me; The message will be different based on the methods, Get, Post and Pacth}"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/images',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractCreateApi',
            'userClassname' => 'CreateApi',
            'operationId' => 'createImage',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Return the image on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/createImage_201_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "uid" : 1,
          "src" : "image1.jpg",
          "alt" : "Alt text for image 1",
          "createdAt" : "2023-11-28T09:00:00Z",
          "updatedAt" : "2023-11-28T09:30:00Z"
        },
        "message" : "{fix me; The message will be different based on the methods, Get, Post and Pacth}"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '',
            'path' => '/users',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractCreateApi',
            'userClassname' => 'CreateApi',
            'operationId' => 'createUser',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Return the user on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/createUser_201_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "uid" : 1,
          "firstName" : "John",
          "lastName" : "Doe",
          "email" : "john.doe@example.com",
          "createdAt" : "2023-11-28T09:00:00Z",
          "updatedAt" : "2023-11-28T09:30:00Z",
          "loggedInAt" : "2023-11-28T09:30:00Z"
        },
        "message" : "{fix me; The message will be different based on the methods, Get, Post and Pacth}"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/_*',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'catchAll',
            'responses' => [
                'default' => [
                    'jsonSchema' => '{
  "description" : "The request method is not supported.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 405,
          "message" : "The request method is not supported.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/blogs/{uid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDeleteApi',
            'userClassname' => 'DeleteApi',
            'operationId' => 'deleteBlog',
            'responses' => [
                '204' => [
                    'jsonSchema' => '{
  "description" : "The resource has been deleted successfully",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/NoContentResponse"
      },
      "example" : {
        "success" : true,
        "message" : "The resource has been deleted successfully."
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/events/{uid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDeleteApi',
            'userClassname' => 'DeleteApi',
            'operationId' => 'deleteEvent',
            'responses' => [
                '204' => [
                    'jsonSchema' => '{
  "description" : "The resource has been deleted successfully",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/NoContentResponse"
      },
      "example" : {
        "success" : true,
        "message" : "The resource has been deleted successfully."
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/images/{uid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDeleteApi',
            'userClassname' => 'DeleteApi',
            'operationId' => 'deleteImage',
            'responses' => [
                '204' => [
                    'jsonSchema' => '{
  "description" : "The resource has been deleted successfully",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/NoContentResponse"
      },
      "example" : {
        "success" : true,
        "message" : "The resource has been deleted successfully."
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '',
            'path' => '/users/{uid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDeleteApi',
            'userClassname' => 'DeleteApi',
            'operationId' => 'deleteUser',
            'responses' => [
                '204' => [
                    'jsonSchema' => '{
  "description" : "The resource has been deleted successfully",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/NoContentResponse"
      },
      "example" : {
        "success" : true,
        "message" : "The resource has been deleted successfully."
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/blogs/{id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractGetApi',
            'userClassname' => 'GetApi',
            'operationId' => 'getBlog',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Return the blog on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/createBlog_201_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "uid" : 1,
          "title" : "Blog Post",
          "slug" : "blog-post",
          "shortDesc" : "A brief description of the blog post",
          "image" : {
            "src" : "image.jpg",
            "alt" : "Image for blog post"
          },
          "content" : "This blog will introduce you to the basics...",
          "createdAt" : "2023-11-28T10:00:00Z",
          "updatedAt" : "2023-11-28T11:00:00Z"
        },
        "message" : "{fix me; The message will be different based on the methods, Get, Post and Pacth}"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/events/{id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractGetApi',
            'userClassname' => 'GetApi',
            'operationId' => 'getEvent',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Return the event on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/createEvent_201_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "items" : [ {
            "uid" : 1,
            "title" : "Event 1",
            "shortDesc" : "A brief description of the event 1",
            "createdAt" : "2023-11-28T10:00:00Z",
            "updatedAt" : "2023-11-28T11:00:00Z",
            "startDateTime" : "2023-12-01T09:00:00Z",
            "location" : "Willowbrook Lane 17, Welford-on-Avon, Warwickshire, CV37 8JA, United Kingdom"
          }, {
            "uid" : 2,
            "title" : "Event 2",
            "shortDesc" : "A brief description of the event 2",
            "startDateTime" : "2023-12-08T09:00:00Z",
            "location" : "Convention Center",
            "createdAt" : "2023-11-28T10:00:00Z",
            "updatedAt" : "2023-11-28T11:00:00Z"
          } ],
          "pagination" : {
            "first" : 1,
            "prev" : 1,
            "current" : 1,
            "next" : 1,
            "last" : 1
          },
          "results" : 2,
          "totalResults" : 2,
          "page" : 1,
          "totalPages" : 1
        },
        "message" : "{fix me; The message will be different based on the methods, Get, Post and Pacth}"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/images/{uid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractGetApi',
            'userClassname' => 'GetApi',
            'operationId' => 'getImage',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Return the image on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/createImage_201_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "uid" : 1,
          "src" : "image1.jpg",
          "alt" : "Alt text for image 1",
          "createdAt" : "2023-11-28T09:00:00Z",
          "updatedAt" : "2023-11-28T09:30:00Z"
        },
        "message" : "{fix me; The message will be different based on the methods, Get, Post and Pacth}"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/users/{uid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractGetApi',
            'userClassname' => 'GetApi',
            'operationId' => 'getUser',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Return the user on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/createUser_201_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "uid" : 1,
          "firstName" : "John",
          "lastName" : "Doe",
          "email" : "john.doe@example.com",
          "createdAt" : "2023-11-28T09:00:00Z",
          "updatedAt" : "2023-11-28T09:30:00Z",
          "loggedInAt" : "2023-11-28T09:30:00Z"
        },
        "message" : "{fix me; The message will be different based on the methods, Get, Post and Pacth}"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/blogs',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractGetsApi',
            'userClassname' => 'GetsApi',
            'operationId' => 'getBlogs',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Returns a list of blog posts on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/getBlogs_200_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "items" : [ {
            "uid" : 1,
            "title" : "Blog Post 1",
            "shortDesc" : "A brief description of the blog post 1",
            "image" : {
              "src" : "image1.jpg",
              "alt" : "Image for blog post 1"
            },
            "createdAt" : "2023-11-28T10:00:00Z",
            "updatedAt" : "2023-11-28T11:00:00Z",
            "_links" : {
              "self" : {
                "href" : "/blogs/1",
                "title" : "Read More"
              },
              "slug" : {
                "href" : "/blogs/blog-post-1",
                "title" : "Read More"
              }
            }
          }, {
            "uid" : 2,
            "title" : "Blog Post 2",
            "shortDesc" : "A brief description of the blog post 2",
            "image" : {
              "src" : "image2.jpg",
              "alt" : "Image for blog post 2"
            },
            "createdAt" : "2023-11-28T10:00:00Z",
            "updatedAt" : "2023-11-28T11:00:00Z",
            "_links" : {
              "self" : {
                "href" : "/blogs/2",
                "title" : "Read More"
              },
              "slug" : {
                "href" : "/blogs/blog-post-2",
                "title" : "Read More"
              }
            }
          } ],
          "pagination" : {
            "first" : null,
            "prev" : null,
            "self" : {
              "href" : "/blogs?page=1",
              "title" : "Current page"
            },
            "next" : null,
            "last" : null
          },
          "results" : 2,
          "totalResults" : 2,
          "page" : 1,
          "totalPages" : 1
        },
        "message" : "Successfully retrieved the resource."
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/events',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractGetsApi',
            'userClassname' => 'GetsApi',
            'operationId' => 'getEvents',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Returns a list of events on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/getEvents_200_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "items" : [ {
            "uid" : 1,
            "title" : "Event 1",
            "shortDesc" : "A brief description of the event 1",
            "createdAt" : "2023-11-28T10:00:00Z",
            "updatedAt" : "2023-11-28T11:00:00Z",
            "startDateTime" : "2023-12-01T09:00:00Z",
            "location" : "Willowbrook Lane 17, Welford-on-Avon, Warwickshire, CV37 8JA, United Kingdom"
          }, {
            "uid" : 2,
            "title" : "Event 2",
            "shortDesc" : "A brief description of the event 2",
            "startDateTime" : "2023-12-08T09:00:00Z",
            "location" : "Convention Center",
            "createdAt" : "2023-11-28T10:00:00Z",
            "updatedAt" : "2023-11-28T11:00:00Z"
          } ],
          "pagination" : {
            "first" : 1,
            "prev" : 1,
            "current" : 1,
            "next" : 1,
            "last" : 1
          },
          "results" : 2,
          "totalResults" : 2,
          "page" : 1,
          "totalPages" : 1
        },
        "message" : "Successfully retrieved the resource."
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/images',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractGetsApi',
            'userClassname' => 'GetsApi',
            'operationId' => 'getImages',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Returns a list of images on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/getImages_200_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "items" : [ {
            "uid" : 1,
            "src" : "image1.jpg",
            "alt" : "Alt text for image 1",
            "createdAt" : "2023-11-28T09:00:00Z",
            "updatedAt" : "2023-11-28T09:30:00Z"
          }, {
            "uid" : 2,
            "src" : "image1.jpg",
            "alt" : "Alt text for image 1",
            "createdAt" : "2023-11-29T08:00:00Z",
            "updatedAt" : "2023-11-29T08:45:00Z"
          } ],
          "pagination" : {
            "first" : 1,
            "prev" : 1,
            "current" : 1,
            "next" : 1,
            "last" : 1
          },
          "results" : 2,
          "totalResults" : 2,
          "page" : 1,
          "totalPages" : 1
        },
        "message" : "Successfully retrieved the resource."
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '',
            'path' => '/users',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractGetsApi',
            'userClassname' => 'GetsApi',
            'operationId' => 'getUsers',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Returns a list of users on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/getUsers_200_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "items" : [ {
            "uid" : 1,
            "firstName" : "John",
            "lastName" : "Doe",
            "email" : "john.doe@example.com",
            "createdAt" : "2023-11-28T09:00:00Z",
            "updatedAt" : "2023-11-28T09:30:00Z",
            "loggedInAt" : "2023-11-28T09:30:00Z"
          }, {
            "uid" : 2,
            "firstName" : "Jane",
            "lastName" : "Smith",
            "email" : "jane.smith@example.com",
            "createdAt" : "2023-11-29T08:00:00Z",
            "updatedAt" : "2023-11-29T08:45:00Z",
            "loggedInAt" : "2023-11-29T08:45:00Z"
          } ],
          "pagination" : {
            "first" : 1,
            "prev" : 1,
            "current" : 1,
            "next" : 1,
            "last" : 1
          },
          "results" : 2,
          "totalResults" : 2,
          "page" : 1,
          "totalPages" : 1
        },
        "message" : "Successfully retrieved the resource."
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '',
            'path' => '/blogs/{uid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUpdateApi',
            'userClassname' => 'UpdateApi',
            'operationId' => 'updateBlog',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Return the blog on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/createBlog_201_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "uid" : 1,
          "title" : "Blog Post",
          "slug" : "blog-post",
          "shortDesc" : "A brief description of the blog post",
          "image" : {
            "src" : "image.jpg",
            "alt" : "Image for blog post"
          },
          "content" : "This blog will introduce you to the basics...",
          "createdAt" : "2023-11-28T10:00:00Z",
          "updatedAt" : "2023-11-28T11:00:00Z"
        },
        "message" : "{fix me; The message will be different based on the methods, Get, Post and Pacth}"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '',
            'path' => '/events/{uid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUpdateApi',
            'userClassname' => 'UpdateApi',
            'operationId' => 'updateEvent',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Return the event on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/createEvent_201_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "items" : [ {
            "uid" : 1,
            "title" : "Event 1",
            "shortDesc" : "A brief description of the event 1",
            "createdAt" : "2023-11-28T10:00:00Z",
            "updatedAt" : "2023-11-28T11:00:00Z",
            "startDateTime" : "2023-12-01T09:00:00Z",
            "location" : "Willowbrook Lane 17, Welford-on-Avon, Warwickshire, CV37 8JA, United Kingdom"
          }, {
            "uid" : 2,
            "title" : "Event 2",
            "shortDesc" : "A brief description of the event 2",
            "startDateTime" : "2023-12-08T09:00:00Z",
            "location" : "Convention Center",
            "createdAt" : "2023-11-28T10:00:00Z",
            "updatedAt" : "2023-11-28T11:00:00Z"
          } ],
          "pagination" : {
            "first" : 1,
            "prev" : 1,
            "current" : 1,
            "next" : 1,
            "last" : 1
          },
          "results" : 2,
          "totalResults" : 2,
          "page" : 1,
          "totalPages" : 1
        },
        "message" : "{fix me; The message will be different based on the methods, Get, Post and Pacth}"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '',
            'path' => '/images/{uid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUpdateApi',
            'userClassname' => 'UpdateApi',
            'operationId' => 'updateImage',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Return the image on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/createImage_201_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "uid" : 1,
          "src" : "image1.jpg",
          "alt" : "Alt text for image 1",
          "createdAt" : "2023-11-28T09:00:00Z",
          "updatedAt" : "2023-11-28T09:30:00Z"
        },
        "message" : "{fix me; The message will be different based on the methods, Get, Post and Pacth}"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '',
            'path' => '/users/{uid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUpdateApi',
            'userClassname' => 'UpdateApi',
            'operationId' => 'updateUser',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Return the user on success",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/createUser_201_response"
      },
      "example" : {
        "success" : true,
        "data" : {
          "uid" : 1,
          "firstName" : "John",
          "lastName" : "Doe",
          "email" : "john.doe@example.com",
          "createdAt" : "2023-11-28T09:00:00Z",
          "updatedAt" : "2023-11-28T09:30:00Z",
          "loggedInAt" : "2023-11-28T09:30:00Z"
        },
        "message" : "{fix me; The message will be different based on the methods, Get, Post and Pacth}"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "The request cannot be fulfilled due to bad syntax.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 400,
          "message" : "The request cannot be fulfilled due to bad syntax.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Access is denied.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 401,
          "message" : "Access is denied.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "The requested resource was not found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ErrorResponse"
      },
      "example" : {
        "success" : false,
        "error" : {
          "code" : 404,
          "message" : "The requested resource was not found.",
          "description" : "A concrete description..."
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
    ];

    /**
     * Add routes to Slim app.
     *
     * @param \Slim\App $app Pre-configured Slim application instance
     *
     * @throws HttpNotImplementedException When implementation class doesn't exists
     */
    public function __invoke(\Slim\App $app): void
    {
        $app->options('/{routes:.*}', function (ServerRequestInterface $request, ResponseInterface $response) {
            // CORS Pre-Flight OPTIONS Request Handler
            return $response;
        });

        // create mock middleware factory
        /** @var \Psr\Container\ContainerInterface */
        $container = $app->getContainer();
        /** @var \OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory|null */
        $mockMiddlewareFactory = null;
        if ($container->has(\OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory::class)) {
            // I know, anti-pattern. Don't retrieve dependency directly from container
            $mockMiddlewareFactory = $container->get(\OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory::class);
        }

        foreach ($this->operations as $operation) {
            $callback = function (ServerRequestInterface $request) use ($operation) {
                $message = "How about extending {$operation['classname']} by {$operation['apiPackage']}\\{$operation['userClassname']} class implementing {$operation['operationId']} as a {$operation['httpMethod']} method?";
                throw new HttpNotImplementedException($request, $message);
            };
            $middlewares = [];

            if (class_exists("\\{$operation['apiPackage']}\\{$operation['userClassname']}")) {
                // Notice how we register the controller using the class name?
                // PHP-DI will instantiate the class for us only when it's actually necessary
                $callback = ["\\{$operation['apiPackage']}\\{$operation['userClassname']}", $operation['operationId']];
            }

            if ($mockMiddlewareFactory) {
                $mockSchemaResponses = array_map(function ($item) {
                    return json_decode($item['jsonSchema'], true);
                }, $operation['responses']);
                $middlewares[] = $mockMiddlewareFactory->create($mockSchemaResponses);
            }

            $route = $app->map(
                [$operation['httpMethod']],
                "{$operation['basePathWithoutHost']}{$operation['path']}",
                $callback
            )->setName($operation['operationId']);


            foreach ($middlewares as $middleware) {
                $route->add($middleware);
            }
        }
    }
}
